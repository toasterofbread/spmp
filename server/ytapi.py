from functools import wraps
from urllib.parse import urlencode, urlparse, parse_qs
from flask import Flask, request, jsonify
from flask.wrappers import Response
import requests
import json
from bs4 import BeautifulSoup
from ytmusicapi import YTMusic
from spectre7 import utils

class YtApi:

    def __init__(self, app: Flask, server):

        def ytApiEndpoint(endpoint: str):
            def wrapper(func):
                @wraps(func)
                def decoratedFunction(*args, **kwargs):
                    params = dict(request.args)
                    params["key"] = server.ytapi_key
                    url = f"https://www.googleapis.com/youtube/v3/{endpoint}?" + urlencode(params)

                    cached = server.getCache("yt", url)
                    if cached is not None:
                        return jsonify(cached)

                    ret: Response = func(*args, **kwargs)
                    if ret.status_code == 200:
                        server.setCache("yt", url, ret.get_json())

                    return ret
                return decoratedFunction
            return wrapper

        @app.route("/youtubeapi/videos/")
        @server.requireKey
        @ytApiEndpoint("videos")
        def videos():
            params = dict(request.args)
            # loc = params.pop("localisation", None)

            params["key"] = server.ytapi_key
            url = f"https://www.googleapis.com/youtube/v3/videos?" + urlencode(params)

            response = requests.get(url)
            if response.status_code != 200:
                return server.errorResponse(response.status_code, f"{response.reason}\n{response.text}")

            data = response.json()
            # if loc:
            #     for item in data["items"]:
            #         if "snippet" in item and "localizations" in item and loc in item["localizations"]:
            #             localisation = item["localizations"][loc]
            #             for key in localisation:
            #                 item["snippet"][key] = localisation[key]

            return jsonify(data)

        @app.route("/youtubeapi/channels/")
        @server.requireKey
        @ytApiEndpoint("channels")
        def channels():
            params = dict(request.args)
            params["key"] = server.ytapi_key

            # if "id" in params:
            #     params["id"] = self.ensureCorrectChannelId(params["id"])

            url = f"https://www.googleapis.com/youtube/v3/channels?" + urlencode(params)

            response = requests.get(url)
            if response.status_code != 200:
                return server.errorResponse(response.status_code, f"{response.reason}\n{response.text}")

            return jsonify(response.json())

        @app.route("/youtubeapi/<endpoint>/")
        @server.requireKey
        def other(endpoint: str):

            @ytApiEndpoint(endpoint)
            def wrapped():
                params = dict(request.args)
                params["key"] = server.ytapi_key
                url = f"https://www.googleapis.com/youtube/v3/{endpoint}?" + urlencode(params)

                response = requests.get(url)
                if response.status_code != 200:
                    return server.errorResponse(response.status_code, f"{response.reason}\n{response.text}")

                return jsonify(response.json())

            return wrapped()

    def ensureCorrectChannelId(self, channel_id: str):
        try:
            if not self.isChannelAutogenerated(channel_id):
                return channel_id
            return YTMusic().get_artist(channel_id)["channelId"]
        except Exception:
            return channel_id

    def isChannelAutogenerated(self, channel_id: str):
        response = requests.get(f"https://www.youtube.com/channel/{channel_id}/about", headers={"Cookie": "CONSENT=YES+1"})
        response.raise_for_status()

        try:
            for script in BeautifulSoup(response.text).find_all("script"):
                if script.text.startswith("var ytInitialData = {"):
                    data = json.loads(script.text[20:-1])
                    url: str = data["contents"]["twoColumnBrowseResultsRenderer"]["tabs"][2]["tabRenderer"]["content"]["sectionListRenderer"]["contents"][0]["itemSectionRenderer"]["contents"][0]["channelAboutFullMetadataRenderer"]["primaryLinks"][0]["navigationEndpoint"]["urlEndpoint"]["url"]

                    if not url.startswith("https://www.youtube.com/redirect?event=channel_description&redir_token="):
                        return False

                    return parse_qs(urlparse(url).query)["q"][0] == "https://support.google.com/youtube/answer/2579942"
        except (IndexError, KeyError):
            return False
